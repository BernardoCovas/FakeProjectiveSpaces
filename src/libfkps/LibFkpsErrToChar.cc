#include <LibFkps.h>

const char* LIBFKPS_ERR_SUCCESS_str					= "LIBFKPS_ERR_SUCCESS";
const char* LIBFKPS_ERR_MEMORY_str					= "LIBFKPS_ERR_MEMORY";
const char* LIBFKPS_ERR_LIB_NOT_FOUND_str			= "LIBFKPS_ERR_LIB_NOT_FOUND";
const char* LIBFKPS_ERR_SRC_NOT_FOUND_str			= "LIBFKPS_ERR_SRC_NOT_FOUND";
const char* LIBFKPS_ERR_SOL_NOT_FOUND_str			= "LIBFKPS_ERR_SOL_NOT_FOUND";
const char* LIBFKPS_ERR_CREATE_DIRS_str				= "LIBFKPS_ERR_CREATE_DIRS";
const char* LIBFKPS_ERR_COMPILE_str					= "LIBFKPS_ERR_COMPILE";
const char* LIBFKPS_ERR_PARTITION_END_str			= "LIBFKPS_ERR_PARTITION_END";
const char* LIBFKPS_ERR_PARTITION_INIT_str			= "LIBFKPS_ERR_PARTITION_INIT";
const char* LIBFKPS_ERR_PARTITION_INDEX_RANGE_str	= "LIBFKPS_ERR_PARTITION_INDEX_RANGE";
const char* LIBFKPS_ERR_PARTITION_FULL_str			= "LIBFKPS_ERR_PARTITION_FULL";


const char* LibFkpsErrToChar(LibFkpsErr_t err)
{
	switch (err)
	{
	case LIBFKPS_ERR_SUCCESS:
		return LIBFKPS_ERR_SUCCESS_str;
	case LIBFKPS_ERR_MEMORY:
		return LIBFKPS_ERR_MEMORY_str;
	case LIBFKPS_ERR_LIB_NOT_FOUND:
		return LIBFKPS_ERR_LIB_NOT_FOUND_str;
	case LIBFKPS_ERR_SRC_NOT_FOUND:
		return LIBFKPS_ERR_SRC_NOT_FOUND_str;
	case LIBFKPS_ERR_SOL_NOT_FOUND:
		return LIBFKPS_ERR_SOL_NOT_FOUND_str;
	case LIBFKPS_ERR_CREATE_DIRS:
		return LIBFKPS_ERR_CREATE_DIRS_str;
	case LIBFKPS_ERR_COMPILE:
		return LIBFKPS_ERR_COMPILE_str;
	case LIBFKPS_ERR_PARTITION_END:
		return LIBFKPS_ERR_PARTITION_END_str;
	case LIBFKPS_ERR_PARTITION_INDEX_RANGE:
		return LIBFKPS_ERR_PARTITION_INDEX_RANGE_str;
	case LIBFKPS_ERR_PARTITION_INIT:
		return LIBFKPS_ERR_PARTITION_INIT_str;
	case LIBFKPS_ERR_PARTITION_FULL:
		return LIBFKPS_ERR_PARTITION_FULL_str;
	default:
		return "?";
	}
}